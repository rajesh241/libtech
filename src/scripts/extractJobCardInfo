#! /usr/bin/env python

#This code will get the Oabcgatat Banes
import csv

import sys
sys.path.insert(0, '../')

from wrappers.logger import loggerFetch
from wrappers.db import dbInitialize,dbFinalize


#######################
# Global Declarations
#######################



#############
# Functions
#############

def argsFetch():
  '''
  Paser for the argument list that returns the args list
  '''
  import argparse

  parser = argparse.ArgumentParser(description='Jobcard script for crawling, downloading & parsing')
  parser.add_argument('-v', '--visible', help='Make the browser visible', required=False, action='store_const', const=1)
  parser.add_argument('-l', '--log-level', help='Log level defining verbosity', required=False)
  parser.add_argument('-t', '--timeout', help='Time to wait before a page loads', required=False)
  parser.add_argument('-b', '--browser', help='Specify the browser to test with', required=False)
  parser.add_argument('-u', '--url', help='Specify the url to crawl', required=False)
  parser.add_argument('-c', '--csv', help='Specify CSV with jobcards', required=False)
  parser.add_argument('-o', '--outfile', help='Specify the outfile if different from input file', required=False)
  parser.add_argument('-q', '--query', help='Query to specify the workset, E.g ... where id=147', required=False)

  args = vars(parser.parse_args())
  return args

def fetchJobcardInfo(logger, cur, row, outfile):
  '''
  Fetch the jobcard details
  '''
  logger.info("Row[%s]" % row)

  jobcard = row[0]
  logger.info("Processing jobcard[%s]" % jobcard)

  if jobcard == "" or jobcard.find('/') != 17:
    return

  query = 'select headOfFamily from jobcardRegister where jobcard="' + jobcard + '"'
  logger.info("query[%s]" % query)
  cur.execute(query)
  head = cur.fetchall()[0][0]
  logger.info("HeadOfFamily[%s]" % head)

  query = 'select applicantName, accountNo from jobcardDetails where jobcard="' + jobcard + '"'
  logger.info("query[%s]" % query)
  cur.execute(query)
  names = cur.fetchall()
  logger.debug("Names[%s]" % str(names))

  name_list = ''
  for name in names:
    print name
    name_list += name[0].strip() + "(" + name[1] + ") "
  logger.info("NamesList[%s]" % name_list)

  row += [ head, name_list ]
  print row

  import codecs

  with codecs.open(outfile, 'a', "utf-8") as out_handle:
    out_handle.write(','.join(row) + '\n')

    logger.info("Written file [%s]" % outfile)
    logger.debug("File content [%s]" % ','.join(row))


def processInput(logger, csvfile=None, outfile=None, query=None):
  '''
  Process any missed calls in the libtech DB
  '''
  db = dbInitialize(db="surguja", charset="utf8")
  cur = db.cursor()
  cur.execute("SET NAMES utf8")

  logger.info("BEGIN PROCESSING...")


  if csvfile == None:
    csvfile = '/tmp/jc.csv'
    
  if outfile == None:
    outfile = '/tmp/z.csv'

  with open(csvfile, 'rb') as csv_handle:
    jobcards = csv.reader(csv_handle, delimiter=',')
    
    for row in jobcards:
      fetchJobcardInfo(logger, cur, row, outfile)
      
  dbFinalize(db)
  logger.info("...END PROCESSING")
  

def main():
  args = argsFetch()
  logger = loggerFetch(args.get('log_level'))
  logger.info('args: %s', str(args))

  processInput(logger, args['csv'], args['outfile'], args['query'])

  exit(0)

if __name__ == '__main__':
  main()
