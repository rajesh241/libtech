#! /usr/bin/env python

#This code will get the Oabcgatat Banes
import os
import csv
from bs4 import BeautifulSoup, Tag
import requests

import logging
import MySQLdb
import time
import re

from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.by import By

#######################
# Global Declarations
#######################

delay = 2
timeout = 10
url="http://www.nrega.telangana.gov.in/"
browser="Firefox"
logFile = __file__+'.log'
logLevel = logging.ERROR
logFormat = '%(asctime)s:[%(name)s|%(levelname)s]: %(message)s'

#############
# Functions
#############

'''
def logInitialize():
  import logging
  logging.basicConfig(filename=logFile, level=logLevel, format=logFormat) # Mynk
'''

def loggerFetch(level='ERROR'):
  logger = logging.getLogger(__name__)

  if level:                     # Mynk ???
    numeric_level = getattr(logging, level.upper(), None)
    if not isinstance(numeric_level, int):
      raise ValueError('Invalid log level: %s' % level)
    else:
      logger.setLevel(numeric_level)
  else:
    logger.setLevel(logLevel)

  # create console handler and set level to debug
  ch = logging.StreamHandler()
  ch.setLevel(logging.DEBUG)    # Mynk ???

  # create formatter e.g - FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'
  formatter = logging.Formatter(logFormat)

  # add formatter to ch
  ch.setFormatter(formatter)

  # add ch to logger
  logger.addHandler(ch)

  return logger

def loggerTest(logger):
  logger.debug('debug message')
  logger.info('info message')
  logger.warn('warn message')
  logger.error('error message')
  logger.critical('critical message')
    

def argsFetch():
  '''
  Paser for the argument list that returns the args list
  '''
  import argparse

  parser = argparse.ArgumentParser(description='Jobcard script for crawling, downloading & parsing')
  parser.add_argument('-v', '--visible', help='Make the browser visible', required=False, action='store_const', const=1)
  parser.add_argument('-l', '--log-level', help='Log level defining verbosity', required=False)
  parser.add_argument('-t', '--timeout', help='Time to wait before a page loads', required=False)
  parser.add_argument('-b', '--browser', help='Specify the browser to test with', required=False)
  parser.add_argument('-u', '--url', help='Specify the url to crawl', required=False)
  parser.add_argument('-j', '--jobcard-number', help='Specify the jobcard no to fetch', required=True)
  parser.add_argument('-m', '--mobile-number', help='Specify the mobile number', required=True)
  parser.add_argument('-i', '--missed-call-id', help='Specify the ID of missed call', required=True)
  parser.add_argument('-d', '--directory', help='Specify directory to download html file to', required=False)

  args = vars(parser.parse_args())
  return args

def parserFinalize(parser):
  parser.close()


def displayInitialize(isVisible=0):
  from pyvirtualdisplay import Display
  
  display = Display(visible=isVisible, size=(600, 400))
  display.start()
  return display

def displayFinalize(display):
  display.stop()

def driverInitialize(browser="Firefox"):
  if browser == "Firefox":
    fp = webdriver.FirefoxProfile()
    fp.native_events_enabled = False
    fp.set_preference("browser.download.folderList",2)
    fp.set_preference("browser.download.manager.showWhenStarting",False)
    fp.set_preference("browser.download.dir", os.getcwd())
    fp.set_preference("browser.helperApps.neverAsk.saveToDisk", "application/vnd.ms-excel")

    driver = webdriver.Firefox(fp)
  elif browser == "PhantomJS":
    driver = webdriver.PhantomJS()
    driver.set_window_size(1120, 550)
  else:
    driver = webdriver.Chrome()

  driver.implicitly_wait(10)

  return driver

def driverFinalize(driver):
  driver.close()
  driver.quit()


def wdTest(driver):
  driver.get("http://www.google.com")
  print driver.page_source.encode('utf-8')


def preText():
  '''
  Prefixing to the html file script
  '''
  text = '''<!DOCTYPE html>
<head>
<title>:: Job Card Holders Information ::</title>
<meta charset="UTF-8">
</head>

<body style="position: relative; min-height: 100%; top: 5px;">

<form action="./submit.php" method="POST">

'''
  return text


def callDetails(jobcard_number, mobile_number, missed_call_id):
  '''
  Adding the Jobcard for Verification
  '''
  call_details ='''
<table cellpadding="0" cellspacing="0" align="center" border="1" width="70%">
  <tbody>
    <tr>
      <th colspan="2">Call Details</th>
    </tr>
    <tr>
      <td>Jobcard Number: </td>
      <td><input name="jobcardNumber" type="text" value="jobcard_number"></td>
    </tr>

    <tr>
      <td>Mobile Number: </td>
      <td><input name="mobileNumber" type="text" value="mobile_number"></td>
    </tr>

    <tr>
      <td colspan="2"><input name="missedCallID" type="hidden" value="missed_call_id"></td>
    </tr>

  </tbody>
</table>
'''

  call_details = call_details.replace("jobcard_number", jobcard_number)
  call_details = call_details.replace("mobile_number", mobile_number)
  return call_details.replace("missed_call_id", missed_call_id)



def postText():
  '''
  Suffixing to the html file script
  '''
  text = '''

<table cellpadding="0" cellspacing="0" align="center" border="1" width="70%">
  <tbody>
    <tr>
      <th colspan="2">Problem Details</th>
    </tr>

    <tr>
      <td>Complaint Number</td>
      <td><input name="complaintNumber" type="text"></td>
    </tr>
    <tr>
      <td>Complaint Date</td>
      <td><input name="complaintDate" type="date" value=""></td>
    </tr>

    <tr>
      <td>Service Type</td>
      <td><select name="serviceType">
<option value="1">NREGS</option>
</select></td>
    </tr>

    <tr>
      <td>Service Category:</td>
      <td><select name="serviceCategory">
<option value="1">Delay in payments(Wages)</option>
</select></td>
    </tr>

    <tr>
      <td>Problem Type:</td>
      <td><select name="problemType">
<option value="">--Select One--</option>
<option value="Postoffice">Postoffice</option>
<option value="Smartcard payments">Smartcard payments</option>
<option value="how many weeks it is pending">how many weeks it is pending</option>
<option value="Period in weeks">Period in weeks</option>
<option value="Number of weeks payment pending(ask days)">Number of weeks payment pending(ask days)</option>
<option value="Since when">Since when</option>
<option value="Post Office Biometric(Finger Prints Not Match)">Post Office Biometric(Finger Prints Not Match)</option>
<option value="Village Organizations(VO)">Village Organizations(VO)</option>
</select></td>
    </tr>

    <tr>
      <td>Period in weeks:</td>
      <td><input name="periodInWeeks" type="number"></td>
    </tr>

    <tr>
      <td>Beneficiary Remarks:</td>
      <td><textarea name="beneficiaryRemarks" cols="60" rows="10"></textarea></td>
    </tr>

    <tr>
      <td>Current Step:</td>
      <td><select name="currentStep">
<option value="Call Pending">Trying to Call</option>
<option value="Updated Jobcard Infortion">Updaing JobCard</option>
<option value="Unable to reach callback requested">Request for Call Back</option>
<option value="Form Filled with Basic Details">Form Filled with Basic Details</option>
<option value="Form Finalized">Form Finalized</option>
<option value="Complaint Filed">Filed the Complait</option>
<option value="Complaint Resolved on Website">Resolved on Website</option>
<option value="Resolved Verified on Field">Verified On Field</option>
</select></td>
    </tr>

    <tr>
      <td>Final Status:</td>
      <td><select name="finalStatus">
<option value="Open">Open</option>
<option value="Closed">Closed</option>
</select></td>
    </tr>

    <tr>
      <td>Reason for Complaint Closure:</td>
      <td><select name="closureReason">
<option value="Phone not Reachable">Phone not reachable for a long time</option>
<option value="Duplicate">Duplicate</option>
<option value="Not Nrega Worker">Not An Nrega Worker</option>
<option value="Complaint Resolved Successfully">Verfied that Complaint Successfully Resolved</option>
</select></td>
    </tr>

    <tr>
      <td colspan="2" align="center">                    
        <button type="submit">Submit</button>
      </td>
    </tr>

  </tbody>
</table>


</form>

</body>
</html>
'''
  return text

def htmlUnescape(s):
  """
  Returns the ASCII decoded version of the given HTML string. This does
  NOT remove normal HTML tags like <p>.
  """
  htmlCodes = (
      ("'", '&#39;'),
      ('"', '&quot;'),
      ('>', '&gt;'),
      ('<', '&lt;'),
      ('&', '&amp;')
    )
  for code in htmlCodes:
    s = s.replace(code[1], code[0])
  return s

def fetchJobcard(url, driver, logger, args, dir=None):
  '''
  Fetch the html for the jobcard
  '''
  jobcard_number = args.get('jobcard_number')
  mobile_number  = args.get('mobile_number') 
  missed_call_id = args.get('missed_call_id')

  if dir == None:
    dir="/root/libtech/ghattu/nrega/html"

  filename = dir + '/' + str(missed_call_id) + '_' + str(mobile_number) + '.html'

  if jobcard_number != "0":
    driver.get(url)

    elem = driver.find_element_by_name("spl")
    elem.send_keys("JobCard")
    time.sleep(1)

    elem = driver.find_element_by_name("input2")
    elem.send_keys(jobcard_number)

    elem = driver.find_element_by_name("Go")
    elem.send_keys(Keys.RETURN)

    parent_handle = driver.current_window_handle
    # print "Handles : ", driver.window_handles, "Number : ", len(driver.window_handles)

    if len(driver.window_handles) == 2:
      driver.switch_to_window(driver.window_handles[-1])
    else:
      logger.error("Handlers gone wrong [" + str(driver.window_handles) + "]")
      driver.save_screenshot('./logs/button_'+jobcard_number+'.png')

    html_source = driver.page_source

    driver.close()
    driver.switch_to_window(parent_handle)

    bs = BeautifulSoup(html_source)
    span = bs.find('span',attrs={'class':'rpt-hd-txt'})
    main1 = bs.find('div',id='main1')
    table1 = main1.find('table')
    main3 = bs.find(id='main3')
    table3 = main3.find('table')

    hrow = table3.find('tr')
    th = hrow.find('th')
    heading = str(th).replace('Epayorder No:', 'Select')
  #  heading = '<th align="left" style="border-left:1px #b7b7b7 solid; border-right:1px #b7b7b7 solid; border-bottom:1px #b7b7b7 solid; border-top:1px #b7b7b7 solid;"><b>Select</b></th>'
    hrow.insert(0, heading)

    row = hrow.findNext('tr')

    while True:
      td = row.find('td')
      epay_order_value = td.text
      epay_order_number = epay_order_value.strip()

      if len(epay_order_number) != 16:
        break

      checkbox = '<input type="checkbox" name="ePayOrderList[]" value="'+ epay_order_number + '">'
      value = str(td).replace(epay_order_value, checkbox).replace('align="left"', 'align="center"')
      row.insert(0, value)
      try:
        row = row.findNext('tr')
      except StopIteration:
        break

  else:
    span = ""
    table1 = ""
    table3 = ""

  html_text = preText()
  html_text += callDetails(jobcard_number, mobile_number, missed_call_id)
  html_text += '<div style="background-color: #86C0C0">' + str(span) + '</div> <br />'
  html_text += '<div>' + str(table1) + '</div>'
  html_text += '<div>' + htmlUnescape(str(table3)) + '</div>'
  html_text += postText()

  with open(filename, 'w') as html_file:
    html_file.write(html_text)


def main():
  args = argsFetch()
  logger = loggerFetch(args.get('log_level'))
  # loggerTest(logger)
  logger.info('args: %s', str(args))

  display = displayInitialize(args['visible'])
  driver = driverInitialize(browser)

  # wdTest(driver)
  # jobcard = 141975706007010167
  dir=args['directory']
  fetchJobcard(url, driver, logger, args, dir)

  driverFinalize(driver)
  displayFinalize(display)
  exit(0)

if __name__ == '__main__':
  main()
